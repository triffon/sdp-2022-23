#include <vector>

#include "../node.h"

/***********************************************************************
  Задача 2. Даден е вектор v от цели числа. Казваме, че двоичното
  дърво с положителни числа по върховете t представя v при следните
  условия:

    * v е празният вектор и t е празното дърво; или
    * ако v = v[0],…,v[k-1], a m = ⌊k / 2⌋ (долна цяла част), то коренът
    на t съдържа числото v[m], лявото поддърво на t представя вектора
    v[0],…,v[m-1], а дясното поддърво на t представя вектора
    v[m+1],…,v[k-1].

  Забележка: ако k = 2, то десния подвектор считаме за празен.

  Нека е даден следният шаблонът Node, дефиниран в node.h.
************************************************************************/

/***********************************************************************
  а) Да се реализира функция, която построява дърво, представящо
  вектора v, и връща указател към корена му.

  Упътване: Ако v е вектор, то с помощта на следния конструктор
  std::vector<unsigned> L(v.begin(), v.begin() + count) ще получите
  първите count елемента от v,
  а с std::vector<unsigned> R (v.begin() + start, v.end()), ще
  получите суфикса на v, започващ от елемента с индекс start.

  Пример:
  std::vector<unsigned> v{1, 2, 3, 4, 5, 6},
                        L(v.begin(), v.begin() + 3),
                        R(v.begin() + 4, v.end());

  Тогава L е векторът 1, 2, 3, а R е векторът 5, 6.

 РЕШЕНИЕ:
************************************************************************/

Node<unsigned>* buildTree (const std::vector<unsigned>& v) {
  if (v.empty())
    return nullptr;

  unsigned mid = v.size() / 2;
  std::vector<unsigned>  L(v.begin(), v.begin() + mid), R(v.begin() + mid + 1, v.end());
  return new Node<unsigned>(v[mid], buildTree(L), buildTree(R));
}

/***********************************************************************
 б) Да се реализира функция, която връща вектор, съставен от възлите
 по път в дървото от корен до листо, в който сумата на елементите е
 максимална.
************************************************************************/

void findMaxSum(Node<unsigned>* t, unsigned sum, std::vector<unsigned>& v, unsigned& max, std::vector<unsigned>& maxPath) {
  if (t == nullptr) {
    if (sum > max) {
      max = sum;
      maxPath = v;
    }
  } else {
    v.push_back(t->data);
    findMaxSum(t->left , sum + t->data, v, max, maxPath);
    findMaxSum(t->right, sum + t->data, v, max, maxPath);
    v.pop_back();
  }
}

std::vector<unsigned> sumMax(Node<unsigned>* t) {
  std::vector<unsigned> empty, result;
  unsigned max = 0;
  findMaxSum(t, 0, empty, max, result);
  return result;
}

/***********************************************************************
 КРАЙ НА РЕШЕНИЕТО
************************************************************************/

#define DOCTEST_CONFIG_IMPLEMENT
#include "doctest.h"

/***********************************************************************
  РАЗКОМЕНТИРАЙТЕ СЛЕДВАЩИЯ РЕД, ЗА ДА ВКЛЮЧИТЕ ТЕСТОВЕТЕ
************************************************************************/
#include "task2_tests.h"

int main ()
{
    // пускане на тестовете
    doctest::Context().run();
    return 0;
}